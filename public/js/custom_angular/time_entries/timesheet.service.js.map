{"version":3,"sources":["time_entries/timesheet.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;YAKA;gBACI,0BAAoB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;oBACtB,qBAAgB,GAAG,iBAAiB,CAAC,CAAE,iBAAiB;oBACxD,qBAAgB,GAAG,gBAAgB,CAAC,CAAE,iBAAiB;gBAF7B,CAAC;gBAInC,mCAAQ,GAAR;oBACI,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC,SAAS,CAAC,CAAC;oBAC7E,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBAED,wCAAa,GAAb;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;yBACtC,SAAS,EAAE;yBACX,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,EAApB,CAAoB,CAAC;yBACtC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjC,CAAC;gBAED,eAAe;gBACf,+BAAI,GAAJ,UAAK,SAAc;oBACf,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC;wBACtB,cAAc,EAAE,kBAAkB,EAAE,cAAc,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAC,CAAC,CAAC;oBAC1E,MAAM,CAAC,IAAI,CAAC,IAAI;yBACX,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;yBAC1E,SAAS,EAAE;yBACX,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;yBACvB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACjC,CAAC;gBAEO,sCAAW,GAAnB,UAAoB,KAAU;oBAC1B,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;oBACxC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;gBAClD,CAAC;gBAjCL;oBAAC,iBAAU,EAAE;;oCAAA;gBAkCb,uBAAC;YAAD,CAhCA,AAgCC,IAAA;YAhCD,+CAgCC,CAAA","file":"time_entries/timesheet.service.js","sourcesContent":["import { Injectable }    from '../../../../node_modules/@angular/core';\nimport { Headers, Http } from '../../../../node_modules/@angular/http';\nimport '../../../../node_modules/rxjs/add/operator/toPromise';\n@Injectable()\n\nexport class TimesheetService {\n    constructor(private http: Http) { }\n    private saveTimesheetUrl = 'time-entry/save';  // URL to web api\n    private getTimesheetsUrl = 'time-entry/all';  // URL to web api\n\n    getToken() {\n        let token = document.querySelector('meta[property=\"csrf-token\"]')['content'];\n        return token;\n    }\n\n    getTimesheets(): Promise<any> {\n        return this.http.get(this.getTimesheetsUrl)\n            .toPromise()\n            .then(response => response.json().data)\n            .catch(this.handleError);\n    }\n\n    // Add new Hero\n    post(timesheet: any): Promise<any> {\n        let headers = new Headers({\n            'Content-Type': 'application/json', 'X-CSRF-TOKEN': this.getToken()});\n        return this.http\n            .post(this.saveTimesheetUrl, JSON.stringify(timesheet), {headers: headers})\n            .toPromise()\n            .then(res => res.json())\n            .catch(this.handleError);\n    }\n\n    private handleError(error: any) {\n        console.log('An error occurred', error);\n        return Promise.reject(error.message || error);\n    }\n}"],"sourceRoot":"/source/"}